Developing Data Products Pitch For Course Project
========================================================
author: Christopher Stanwood 
date: 03-Oct-2018
autosize: true

Overview
========================================================
- This application shows the expected life expectancy at birth for most of the provinces of Canada
- It shows how the life expectancy has been steadily increasing since 1980
- It allows the user to select which regions to see, and whether to show results for men, women, or both together
- The results are displayed as a graph and a data table
- The data table uses linear regression to calculate the rate at which life expectancy has been changing, and to predict the life expectancy for 2018
- The data is from the Statistics Canada website: <https://www150.statcan.gc.ca/t1/tbl1/en/tv.action?pid=1310011401>  
- All the code can be seen here: <https://github.com/cstanwood/DevelopingDataProductsCourseProject> 
  ```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, strip.white=TRUE, tidy=TRUE, message=FALSE, warning=FALSE, error=FALSE, comment=FALSE, results = FALSE)
```

```{r}
library(tidyverse)
library(data.table)
library(stats)
library(shiny)
```

```{r}
life_expectancy <-
  data.table::fread(
    input = "13100114.csv",
    sep = ",",
    header = T,
    stringsAsFactors = F,
    verbose = T,
    data.table = F,
    select = c("REF_DATE", "GEO", "Age group", "Sex", "Element", "VALUE")
  )
```
```{r echo=FALSE}
life_expectancy <- as_tibble(life_expectancy)

life_expectancy <-
  life_expectancy %>% filter(`Age group` == "0 years" &
                               Element == "Life expectancy (in years) at age x (ex)") %>% select(-c(`Age group`, Element))

life_expectancy$REF_DATE <-
  as.integer(substr(life_expectancy$REF_DATE, 1, 4))
life_expectancy$VALUE <- as.numeric(life_expectancy$VALUE)
life_expectancy$GEO <- as.factor(life_expectancy$GEO)
life_expectancy$Sex <- as.factor(life_expectancy$Sex)
```

Create Plot
========================================================
  ```{r echo=FALSE}
regions <- c(
  "British Columbia",
  "Alberta",
  "Ontario",
  "Quebec",
  "Newfoundland and Labrador"
)
regionLabel<-"Select Region:"

genders <-  c(
  "Both" = "Both sexes",
  "Female" = "Females", 
  "Male" = "Males"
)

input <- list(Region=regions, Gender=genders)
class(input) <- "Input"

```
In server.R create the plot using the checkboxes "input$Region" and "input$Gender" _(not all code shown due to space restrictions)_:
  ```{r echo = TRUE, eval=FALSE}
ggplot(data = filter(life_expectancy, GEO %in% input$Region & Sex %in% input$Gender),
       aes(x = REF_DATE, y = VALUE, color = GEO, linetype = Sex)) + ...
```

***
  ```{r echo = FALSE, eval=TRUE}
ggplot(data = filter(life_expectancy, GEO %in% input$Region & Sex %in% input$Gender),
       aes(x = REF_DATE, y = VALUE, color = GEO, linetype = Sex)) + 
  scale_color_discrete(name = "Region", breaks = input$Region, labels = input$Region) +
  scale_linetype_discrete(name = "Gender", breaks = input$Gender, labels = input$Gender) + 
  geom_line(size = .5) + theme_bw() + xlab("Year") + ylab("Life Expectancy") + ylim(70, 85)
```

Define Function
===
  Define a custom function to create a linear model for those provinces specified in the checkbox input: 
  ```{r echo=TRUE, eval=TRUE}
calcLm <- function(region) {
  model <- lm(VALUE ~ REF_DATE,
              data = filter(life_expectancy,
                            GEO == region &
                              Sex == "Both sexes"))
  life_expect_2018 <-
    predict(model, newdata = data.frame(REF_DATE = 2018))
  return <- data.frame(
    "Region" = region,
    "Rate Of Change" = round(model$coefficients[2], 2),
    "Predicted Life Expectancy for 2018" = round(life_expect_2018, 2)
  )
}
```

Output Table
===
  _(Output is created with slightly different code than shown below, because of differences between shiny and R presenter)_
```{r echo=TRUE, eval=FALSE}
mydataframe <- reactive({
  mylist <- lapply(input$Region, calcLm)
  do.call("rbind", mylist)
})
output$table <- renderDataTable(mydataframe())
```  

```{r echo=FALSE, eval=TRUE, results=TRUE}
mylist <- lapply(input$Region, calcLm)
mydataframe<- as.data.frame( do.call("rbind", mylist) )
rownames(mydataframe) <- NULL
knitr::kable(mydataframe, format="html")
```